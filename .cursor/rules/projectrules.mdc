---
alwaysApply: true
---

# TRP Backend Project Rules

## Project Overview
- This is the backend for the Toronto Regional Properties (TRP) application, a real estate platform integrating MLS (Multiple Listing Service) data and Supabase for user authentication and management.
- The goal is to create a modular FastAPI-based API with endpoints for property searches, media retrieval, user authentication, and merged data for page loads.
- The backend should securely handle API keys, map MLS data, and provide efficient responses for frontend consumption.

## Folder Structure
- Root directory: `trp-backend`
  - `modules/`: Main folder for modular components.
    - `properties/`: Handles property-related APIs.
      - `search/`: Endpoints for filtering and retrieving property lists.
      - `get/`: Endpoints for retrieving specific property details.
      - `media/`: Endpoints for fetching property images.
    - `users/`: Handles user-related APIs.
      - `authentication/`: Endpoints for user signup, login, token refresh, and user management.
    - `page_load/`: Contains merged APIs for specific page loads.
      - `home/`: Merged APIs for the homepage, including user and property data.
  - `main.py`: Entry point for the FastAPI app.
  - `.env`: Secure file for environment variables.
  - `requirements.txt`: List of Python dependencies.

## Coding Conventions
- Use Python 3.9+ with async/await for asynchronous operations.
- Follow PEP 8 style guidelines (e.g., 4-space indentation, lowercase variable names with underscores).
- Use type hints with Pydantic models for request and response validation.
- Import statements should be grouped: standard library, third-party, local.
- Document endpoints with FastAPI docstrings and OpenAPI tags.

## Variable and Security Rules
- Store sensitive data (e.g., `MLS_AUTHTOKEN`, `SUPABASE_ANON_KEY`) in a `.env` file using `python-dotenv`.
- Use environment variables accessed via `os.getenv()` with fallback defaults.
- Avoid hardcoding API keys or tokens in source code.
- Define mappings (e.g., `resourceRecordKeyMapping`) as environment variables or fetch dynamically from a database.

## API Design Rules
- Use RESTful conventions (e.g., `/properties/search` for searches, `/users/auth/signup` for signup).
- Return JSON responses with `@odata.context` for MLS compatibility where applicable.
- Handle errors with HTTPException for status codes (e.g., 400, 401, 500).
- Use async functions with `aiohttp` for external API calls to MLS and Supabase.
- Include query parameters and request bodies as Pydantic models for validation.

## Specific Requirements
- **Properties Module**: Implement endpoints to fetch filtered properties and media, merging data based on `ListingKey` to `ResourceRecordKey` mapping.
- **Users Module**: Integrate with Supabase for authentication (signup, login, token refresh) and user CRUD operations.
- **Page Load Module**: Create merged APIs for homepage data, conditional on user login status, combining user details and properties.
- Ensure scalability with potential caching and database integration (e.g., Supabase for mappings).
- Generate OpenAPI documentation automatically via FastAPI.

## Testing and Development
- Test endpoints using Postman or FastAPIâ€™s Swagger UI (`/docs`).
- Use `uvicorn` for local development with `--reload` for auto-restart.
- Plan for CI/CD integration (e.g., GitHub Actions) in future iterations.